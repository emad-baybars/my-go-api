package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"go-backend-template/config"
	"go-backend-template/database"

	_ "go-backend-template/docs" // This will be generated by swag
	"go-backend-template/handlers"
	"go-backend-template/middleware"
	"go-backend-template/models"
	"go-backend-template/routes"
	"go-backend-template/utils"
)

// @title           Backend API Template
// @version         1.0
// @description     A comprehensive Go backend template with authentication, localization, and database support
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.example.com/support
// @contact.email  support@example.com

// @license.name  MIT
// @license.url   http://www.opensource.org/licenses/MIT

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	// Load environment variables
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, using system environment variables")
	}

	// Initialize configuration
	cfg := config.Load()

	// Initialize logger
	logger := utils.NewLogger(cfg.LogLevel)

	// Initialize localizer
	localizer, err := utils.NewLocalizer(cfg.DefaultLanguage)
	if err != nil {
		logger.Fatal("Failed to initialize localizer", "error", err)
	}

	// Initialize databases with retry logic
	var mongoDB *database.MongoDB
	var postgresDB *database.PostgresDB

	if cfg.MongoDB.Enabled {
		mongoDB, err = connectMongoDBWithRetry(&cfg.MongoDB, logger)
		if err != nil {
			logger.Fatal("Failed to connect to MongoDB after retries", "error", err)
		}
		defer mongoDB.Disconnect()
		logger.Info("Connected to MongoDB")
	}

	if cfg.PostgresDB.Enabled {
		postgresDB, err = connectPostgresDBWithRetry(&cfg.PostgresDB, logger)
		if err != nil {
			logger.Fatal("Failed to connect to PostgreSQL after retries", "error", err)
		}
		defer postgresDB.Close()
		logger.Info("Connected to PostgreSQL")

		// Auto-migrate PostgreSQL models
		if err := postgresDB.AutoMigrate(&models.User{}); err != nil {
			logger.Fatal("Failed to migrate PostgreSQL models", "error", err)
		}
	}

	// Initialize handlers
	authHandler := handlers.NewAuthHandler(mongoDB, postgresDB, logger, localizer)
	userHandler := handlers.NewUserHandler(mongoDB, postgresDB, logger, localizer)
	healthHandler := handlers.NewHealthHandler(mongoDB, postgresDB, logger)

	// Setup Gin router
	if cfg.Environment == "production" {
		gin.SetMode(gin.ReleaseMode)
	}

	router := gin.New()

	// Add middleware
	router.Use(middleware.Logger(logger))
	router.Use(middleware.Recovery(logger))
	router.Use(middleware.CORS())
	router.Use(middleware.Localization(localizer))
	router.Use(middleware.RequestID())

	// Setup routes
	routes.SetupRoutes(router, authHandler, userHandler, healthHandler, logger)

	// Swagger documentation
	if cfg.Environment != "production" {
		router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	}

	// Create HTTP server
	server := &http.Server{
		Addr:    fmt.Sprintf(":%s", cfg.Port),
		Handler: router,
	}

	// Start server in a goroutine
	go func() {
		logger.Info("Server starting", "port", cfg.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Fatal("Failed to start server", "error", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	logger.Info("Shutting down server...")

	// Graceful shutdown with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		logger.Fatal("Server forced to shutdown", "error", err)
	}

	logger.Info("Server exited")
}

// connectMongoDBWithRetry attempts to connect to MongoDB with retry logic
func connectMongoDBWithRetry(cfg *config.MongoDBConfig, logger utils.Logger) (*database.MongoDB, error) {
	maxRetries := 10
	retryDelay := 3 * time.Second

	for i := 0; i < maxRetries; i++ {
		logger.Info("Attempting to connect to MongoDB", "attempt", i+1, "host", cfg.Host, "port", cfg.Port)

		mongoDB, err := database.NewMongoDB(cfg)
		if err == nil {
			return mongoDB, nil
		}

		logger.Warn("Failed to connect to MongoDB", "attempt", i+1, "error", err)

		if i < maxRetries-1 {
			logger.Info("Retrying MongoDB connection", "delay", retryDelay)
			time.Sleep(retryDelay)
		}
	}

	return nil, fmt.Errorf("failed to connect to MongoDB after %d attempts", maxRetries)
}

// connectPostgresDBWithRetry attempts to connect to PostgreSQL with retry logic
func connectPostgresDBWithRetry(cfg *config.PostgresDBConfig, logger utils.Logger) (*database.PostgresDB, error) {
	maxRetries := 10
	retryDelay := 3 * time.Second

	for i := 0; i < maxRetries; i++ {
		logger.Info("Attempting to connect to PostgreSQL", "attempt", i+1, "host", cfg.Host, "port", cfg.Port)

		postgresDB, err := database.NewPostgresDB(cfg)
		if err == nil {
			return postgresDB, nil
		}

		logger.Warn("Failed to connect to PostgreSQL", "attempt", i+1, "error", err)

		if i < maxRetries-1 {
			logger.Info("Retrying PostgreSQL connection", "delay", retryDelay)
			time.Sleep(retryDelay)
		}
	}

	return nil, fmt.Errorf("failed to connect to PostgreSQL after %d attempts", maxRetries)
}
